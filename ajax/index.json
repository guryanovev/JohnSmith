{"id":"index","title":"User Greeter","children":[],"isNew":false,"markup":"<div id=\"greeter\"></div>","code":"/* ViewModel */\nvar GreeterViewModel = function(){\n    this.userName = /*(*/js.bindableValue()/*)*/;\n\n    this.greetMessage = /*(*/js.dependentValue/*)*/(\n        this.userName,\n        function(userNameValue){\n            if (userNameValue) {\n                return \"Hello, \" + userNameValue + \"!\";\n            }\n\n            return \"Please, enter your name\";\n        });\n};\n\n/* Views */\nvar GreeterView = function(){\n    this./*(*/template/*)*/ =\n        \"<p>Enter your name: <input type='text'/></p>\" +\n        \"<p class='message'></p>\";\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.userName).to(\"input\");\n        view.bind(viewModel.greetMessage).to(\".message\");\n    };\n};\n\n/* Render the view */\njs.renderView(GreeterView, new GreeterViewModel()).to(\"#greeter\");","formattedCode":"/* ViewModel */\nvar GreeterViewModel = function(){\n    this.userName = <span class=\"codeAnnotation\" title=\"<p>Creates an observable object. That object notifies it's listeners about any change.</p> <p class='last'>Normally <b>ViewModel</b> initiates the change and <b>View</b> listens for it.</p>\">js.bindableValue()</span>;\n\n    this.greetMessage = <span class=\"codeAnnotation\" title=\"<p>Creates a calculated observable object. This object will trigger change event on every dependency change.</p><p class='last'>Note that we manually set a dependincy, no magic autodetection.</p>\">js.dependentValue</span>(\n        this.userName,\n        function(userNameValue){\n            if (userNameValue) {\n                return &quot;Hello, &quot; + userNameValue + &quot;!&quot;;\n            }\n\n            return &quot;Please, enter your name&quot;;\n        });\n};\n\n/* Views */\nvar GreeterView = function(){\n    this.<span class=\"codeAnnotation\" title=\"<p>Template is a plain html. As an option, You can move the actual markup to script element and reference it by jQuery selector:</p>\n<p class='last'><code>this.template = '#myViewTemplate'</code></p>\n\">template</span> =\n        &quot;&lt;p&gt;Enter your name: &lt;input type='text'/&gt;&lt;/p&gt;&quot; +\n        &quot;&lt;p class='message'&gt;&lt;/p&gt;&quot;;\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.userName).to(&quot;input&quot;);\n        view.bind(viewModel.greetMessage).to(&quot;.message&quot;);\n    };\n};\n\n/* Render the view */\njs.renderView(GreeterView, new GreeterViewModel()).to(&quot;#greeter&quot;);","description":"<p>\n    Greeter is a typical sample for binding-based UI frameworks.\n    In JohnSmith's variant we also included view rendering to make it more real life looking.\n</p>"}