{"id":"bidirectionalBinding","title":"Bidirectional binding","children":[],"isNew":false,"markup":"<form class=\"form-horizontal\">\n    <div class=\"control-group\">\n        <label for=\"firstNameInput\" class=\"control-label\">First name:</label>\n        <div class=\"controls\">\n            <input id=\"firstNameInput\" type=\"text\" />\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label for=\"lastNameInput\" class=\"control-label\">Last name:</label>\n        <div class=\"controls\">\n            <input id=\"lastNameInput\" type=\"text\" />\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label for=\"bioInput\" class=\"control-label\">Bio:</label>\n        <div class=\"controls\">\n            <textarea id=\"bioInput\"></textarea>\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label for=\"rememberMeInput\" class=\"control-label\">Remember me</label>\n        <div class=\"controls\">\n            <input id=\"rememberMeInput\" type=\"checkbox\" />\n        </div>\n    </div>\n</form>\n\n\n<div id=\"summary\" class=\"\">\n    <table class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <th>First name</th>\n                <th>Last name</th>\n                <th>Bio</th>\n                <th>Remember me</th>\n            </tr>\n        </thead>\n        <tr>\n            <td class=\"firstName\"></td>\n            <td class=\"lastName\"></td>\n            <td class=\"bio\"></td>\n            <td class=\"rememberMe\"></td>\n        </tr>\n    </table>\n</div>","code":"var UserViewModel = function(){\n    this.firstName = js.bindableValue();\n    this.lastName = js.bindableValue();\n    this.bio = js.bindableValue();\n    this.rememberMe = js.bindableValue();\n\n    this.setDefaultValues = function(){\n        this.firstName.setValue(\"John\");\n        this.lastName.setValue(\"Smith\");\n        this.bio.setValue(\"text\");\n    };\n};\n\nvar viewModel = new UserViewModel();\n\n// Set up bindings\njs.bind(viewModel.firstName)\n    .to(\"#firstNameInput\")\n    .to(\"#summary .firstName\");\n\njs.bind(viewModel.lastName)\n    .to(\"#lastNameInput\", { event: \"keyup\" })\n    .to(\"#summary .lastName\");\n\njs.bind(viewModel.bio)\n    .to(\"#bioInput\")\n    .to(\"#summary .bio\");\n\njs.bind(viewModel.rememberMe)\n    .to(\"#rememberMeInput\")\n    .to(\"#summary .rememberMe\");\n\nviewModel.setDefaultValues();\n","formattedCode":"var UserViewModel = function(){\n    this.firstName = js.bindableValue();\n    this.lastName = js.bindableValue();\n    this.bio = js.bindableValue();\n    this.rememberMe = js.bindableValue();\n\n    this.setDefaultValues = function(){\n        this.firstName.setValue(&quot;John&quot;);\n        this.lastName.setValue(&quot;Smith&quot;);\n        this.bio.setValue(&quot;text&quot;);\n    };\n};\n\nvar viewModel = new UserViewModel();\n\n// Set up bindings\njs.bind(viewModel.firstName)\n    .to(&quot;#firstNameInput&quot;)\n    .to(&quot;#summary .firstName&quot;);\n\njs.bind(viewModel.lastName)\n    .to(&quot;#lastNameInput&quot;, { event: &quot;keyup&quot; })\n    .to(&quot;#summary .lastName&quot;);\n\njs.bind(viewModel.bio)\n    .to(&quot;#bioInput&quot;)\n    .to(&quot;#summary .bio&quot;);\n\njs.bind(viewModel.rememberMe)\n    .to(&quot;#rememberMeInput&quot;)\n    .to(&quot;#summary .rememberMe&quot;);\n\nviewModel.setDefaultValues();\n","description":"<p>\n    This example demonstrates bi-directional binding usage.\n    By default John Smith makes any binding to form elements bidirectional.\n    If you wand input value wire to be unidirectional, pass this options to binding config:\n</p>\n\n<pre><code class=\"javascript\">{ bidirectional: false }</code></pre>\n\n<p>Note that for <code>lastName</code> custom event type is set:</p>\n\n<pre><code class=\"javascript\">{ event: \"keyup\" }</code></pre>\n\n<p>Because of this option Last Name change occur on key up instead of field leave.</p>\n\n<div class=\"alert alert-block\">\n    <p>Note how <code>to</code> method calls chained:</p>\n\n    <pre><code class=\"javascript\">js.bind(/*...*/)\n    .to(/* something */)\n    // ...more 'to' cals can go here...\n    .to(/* something */);</code></pre>\n\n    <p>You can use these chains any time you need to bind a single variable to multiple handlers.</p>\n</div>"}