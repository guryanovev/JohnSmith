{"id":"list_binding","title":"List binding","children":[{"id":"view_use_for_list","title":"Rendering bindable lists","children":[],"isNew":false,"markup":"<script id='friendRowTemplate' type='text/view'>\n    <tr class='friend'>\n        <td>\n            <input type=\"checkbox\" />\n        </td>\n        <td class='firstName'></td>\n        <td class='lastName'></td>\n        <td>\n            <a href=\"#\">view details</a>\n        </td>\n    </tr>\n</script>\n\n<table id=\"friendsTable\" class=\"table table-bordered table-striped\">\n    <thead>\n    <tr>\n        <th></th>\n        <th>First name</th>\n        <th>Last name</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>","code":"/* Create a bindable list */\nvar friends = js.bindableList();\n\n/* View */\nvar FriendView = function(){\n    this.template = \"#friendRowTemplate\";\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(\".firstName\");\n        view.bind(viewModel.lastName).to(\".lastName\");\n    };\n}\n\njs.bind(friends).to(\"#friendsTable tbody\", FriendView);\n\nfriends.setValue([\n    { firstName: \"Joe\", lastName: \"Bloggs\"},\n    { firstName: \"Fred\", lastName: \"Bloggs\"},\n    { firstName: \"Bob\", lastName: \"Soap\"}\n]);","formattedCode":"/* Create a bindable list */\nvar friends = js.bindableList();\n\n/* View */\nvar FriendView = function(){\n    this.template = &quot;#friendRowTemplate&quot;;\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(&quot;.firstName&quot;);\n        view.bind(viewModel.lastName).to(&quot;.lastName&quot;);\n    };\n}\n\njs.bind(friends).to(&quot;#friendsTable tbody&quot;, FriendView);\n\nfriends.setValue([\n    { firstName: &quot;Joe&quot;, lastName: &quot;Bloggs&quot;},\n    { firstName: &quot;Fred&quot;, lastName: &quot;Bloggs&quot;},\n    { firstName: &quot;Bob&quot;, lastName: &quot;Soap&quot;}\n]);","description":"<p>\n    You can create bindable collections using <code>js.bindableList</code> method. BindableList acts like a\n    regular bindable value, but it has a few additional methods. BindableList could be bound to markup element\n    using regular View. In this case, the View will be rendered for every list item.\n</p>"},{"id":"list_interactions","title":"List binding interaction","children":[],"isNew":false,"markup":"<script id=\"listItemTemplate\" type=\"text/view\">\n    <li></li>\n</script>\n\n<ul id='employee'></ul>\n\n<a href=\"#\" id=\"clearList\">Click To Clear</a>","code":"var employee = js.bindableList();\n\nvar View = function(){\n    this.template = \"#listItemTemplate\";\n    this.init = function(view, viewModel){\n        view.bind(viewModel.name).to(\"li\");\n    };\n}\njs.bind(employee).to(\"#employee\", View);\n\nvar joeBloggs          = { name: \"Joe Bloggs\" };\nvar fredBloggs         = { name: \"Fred Bloggs\" };\nvar bobSoap            = { name: \"Bob Soap\" };\nvar charlieFarnsbarns  = { name: \"Charlie Farnsbarns\" };\nvar johnQPublic        = { name: \"John Q. Public\" };\nvar joePublic          = { name: \"Joe Public\" };\n\nemployee.add(joeBloggs, fredBloggs, bobSoap);\nemployee.add(charlieFarnsbarns);\nemployee.add(johnQPublic);\nemployee.add(joePublic);\n\nemployee.remove(fredBloggs, johnQPublic);\n\njs.on(\"#clearList\", \"click\").react(function(){\n    employee.clear();\n});","formattedCode":"var employee = js.bindableList();\n\nvar View = function(){\n    this.template = &quot;#listItemTemplate&quot;;\n    this.init = function(view, viewModel){\n        view.bind(viewModel.name).to(&quot;li&quot;);\n    };\n}\njs.bind(employee).to(&quot;#employee&quot;, View);\n\nvar joeBloggs          = { name: &quot;Joe Bloggs&quot; };\nvar fredBloggs         = { name: &quot;Fred Bloggs&quot; };\nvar bobSoap            = { name: &quot;Bob Soap&quot; };\nvar charlieFarnsbarns  = { name: &quot;Charlie Farnsbarns&quot; };\nvar johnQPublic        = { name: &quot;John Q. Public&quot; };\nvar joePublic          = { name: &quot;Joe Public&quot; };\n\nemployee.add(joeBloggs, fredBloggs, bobSoap);\nemployee.add(charlieFarnsbarns);\nemployee.add(johnQPublic);\nemployee.add(joePublic);\n\nemployee.remove(fredBloggs, johnQPublic);\n\njs.on(&quot;#clearList&quot;, &quot;click&quot;).react(function(){\n    employee.clear();\n});","description":"<p>Demonstrates using add/remove methods of bindable list. Note that you can add or remove multiple items at one call.</p>"},{"id":"list_size","title":"Rendering list size","children":[],"isNew":false,"markup":"<div id=\"friendsCount\">\n    You have <span class=\"badge\"></span> friends.\n</div>","code":"// Create a list\nvar friendsList = js.bindableList();\n\n// Bind list size to the markup\njs.bind(friendsList.count()).to(\"#friendsCount span\");\n\n// Set list value to cause list size refresh\nfriendsList.setValue([\"Friend1\", \"Friend2\", \"Friend3\"]);","formattedCode":"// Create a list\nvar friendsList = js.bindableList();\n\n// Bind list size to the markup\njs.bind(friendsList.count()).to(&quot;#friendsCount span&quot;);\n\n// Set list value to cause list size refresh\nfriendsList.setValue([&quot;Friend1&quot;, &quot;Friend2&quot;, &quot;Friend3&quot;]);","description":"<p>\n    <code>BindableList</code> exposes a <code>count()</code> method that returns the list size object.\n    This object is a <code>BindableValue</code> instance so you can wire it to UI element using regular binding functions:\n</p>\n\n<pre><code class=\"javascript\">js.bind(someList.count()).to(\"#someListSize\")</code></pre>\n\n<p>List count gets updated every time you call one of list methods:</p>\n\n<ul>\n    <li><code>setValue</code></li>\n    <li><code>add</code></li>\n    <li><code>remove</code></li>\n</ul>\n"}],"isNew":false,"description":"<div class=\"row-fluid\">\n    <div class=\"span6\">\n        Content coming soon..\n    </div>\n</div>\n"}