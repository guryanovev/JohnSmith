{"id":"viewModel","title":"View model","children":[],"isNew":false,"markup":"<div id=\"viewModel\">\n    <div class=\"firstName\"></div>\n    <div class=\"lastName\"></div>\n</div>","code":"// Declare view model class\nvar PersonViewModel = function(){\n    this.firstName = js.bindableValue();\n    this.lastName = js.bindableValue();\n\n    this.doSomething = function(){\n        this.firstName.setValue(\"John\");\n        this.lastName.setValue(\"Smith\");\n    }\n}\n\n// Create view model instance\nvar meViewModel = new PersonViewModel();\n\n// Using view model instance\njs.bind(meViewModel.firstName).to(\"#viewModel .firstName\");\njs.bind(meViewModel.lastName).to(\"#viewModel .lastName\");\n\nmeViewModel.doSomething();","formattedCode":"// Declare view model class\nvar PersonViewModel = function(){\n    this.firstName = js.bindableValue();\n    this.lastName = js.bindableValue();\n\n    this.doSomething = function(){\n        this.firstName.setValue(&quot;John&quot;);\n        this.lastName.setValue(&quot;Smith&quot;);\n    }\n}\n\n// Create view model instance\nvar meViewModel = new PersonViewModel();\n\n// Using view model instance\njs.bind(meViewModel.firstName).to(&quot;#viewModel .firstName&quot;);\njs.bind(meViewModel.lastName).to(&quot;#viewModel .lastName&quot;);\n\nmeViewModel.doSomething();","description":"<p>\n    <strong>ViewModel</strong> is an objects that acts as a mediator between business logic and view logic.\n    ViewModel exposes bindable properties and functions that could be consumed by corresponding views.\n</p>\n\n<p>\n    It is a common practice to declare ViewModel \"classes\" to handle it's logic. This example demonstrates simple\n    ViewModel class that exposes only 2 bindable variables: first name and last name. In the example these variables\n    are used for configuring binding but in a real application <strong>ViewModel</strong> usually works with\n    <strong>View</strong> object.\n</p>\n"}