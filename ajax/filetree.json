{"id":"filetree","title":"File System Tree","children":[],"isNew":false,"markup":"<script id=\"FileSystemTemplate\" type=\"text/view\">\n    <p>Click on item to view full path:</p>\n    <ul id='treeRoot'>\n    </ul>\n</script>\n\n<div id=\"fileTree\"></div>","code":"/*\n * Model\n *   model is a primary application\n *   state storage */\n\nvar FILE = \"file\";\nvar DIRECTORY = \"directory\";\n\nvar File = function(name, type, children){\n    this.name = name;\n    this.type = type;\n    this.children = children;\n    this.isDirectory = type === DIRECTORY;\n    this.parent = null;\n\n    this.hasChildren = function(){\n        if (this.children){\n            return true;\n        }\n    };\n\n    this.setParent = function(parent){\n        this.parent = parent;\n    };\n\n    this.getFullPath = function(){\n        if (this.parent === null) {\n            return this.name;\n        }\n\n        return this.parent.getFullPath() + \"\\\\\" + this.name;\n    };\n\n    if (this.hasChildren()){\n        for (var i = 0; i < this.children.length; i++){\n            this.children[i].setParent(this);\n        }\n    }\n};\n\nvar FileSystem = function(){\n    this._root = [\n        new File(\"C:\\\\\", DIRECTORY, [\n            new File(\"Users\", DIRECTORY, [\n                new File(\"John Smith\", DIRECTORY,[])\n            ]),\n            new File(\"Windows\", DIRECTORY, []),\n            new File(\"todo.txt\", FILE, null)\n        ]),\n        new File(\"D:\\\\\", DIRECTORY, [])\n    ];\n\n    this.getRoot = function(){\n        return this._root;\n    };\n};\n\n/*\n * ViewModel\n *    view model works with Model and\n *    adapts it's properties for View */\n\nvar FileViewModel = function(file){\n    this.children = js.bindableList();\n    this.name = file.name;\n    this.isDirectory = file.isDirectory;\n\n    if (file.hasChildren()) {\n        for (var i = 0; i < file.children.length; i++) {\n            var child = file.children[i];\n            var childViewModel = new FileViewModel(child);\n\n            this.children.add(childViewModel);\n        }\n    }\n\n    this.showFullPath = function(){\n        alert(file.getFullPath());\n    };\n};\n\nvar FileSystemViewModel = function(fileSystem){\n    this.fileTree = js.bindableList();\n\n    this.initState = function(){\n        var drives = fileSystem.getRoot();\n        for (var i = 0; i < drives.length; i++){\n            var drive = drives[i];\n            var driveViewModel = new FileViewModel(drive);\n\n            this.fileTree.add(driveViewModel);\n        }\n    };\n};\n\n/*\n * View\n *    view consumes ViewModel bindable properties\n *    and wires it to the markup */\n\nvar FileView = function(){\n    this.template =\n        \"<li class='item'>\" +\n            \"<a href='#' class='name'></a>\" +\n            \"<ul class='children'></ul>\" +\n        \"</li>\";\n\n    this.init = function(view, fileViewModel){\n        if (fileViewModel.isDirectory) {\n            view.find(\".item\").addClass(\"directory\");\n        }\n\n        view.bind(fileViewModel.name).to(\".name\");\n        view.bind(fileViewModel.children).to(\".children\", FileView);\n\n        view.on(\"a\", \"click\").react(fileViewModel.showFullPath);\n    };\n};\n\nvar FileTreeView = function(){\n    this.template = \"#FileSystemTemplate\";\n    this.init = function(view, fileSystemViewModel){\n        view.bind(fileSystemViewModel.fileTree).to(\"#treeRoot\", FileView);\n    };\n};\n\n/* Putting it all together */\n\nvar fileSystem = new FileSystem();\nvar fileSystemViewModel = new FileSystemViewModel(fileSystem);\n\njs.renderView(FileTreeView, fileSystemViewModel).to(\"#fileTree\");","formattedCode":"/*\n * Model\n *   model is a primary application\n *   state storage */\n\nvar FILE = &quot;file&quot;;\nvar DIRECTORY = &quot;directory&quot;;\n\nvar File = function(name, type, children){\n    this.name = name;\n    this.type = type;\n    this.children = children;\n    this.isDirectory = type === DIRECTORY;\n    this.parent = null;\n\n    this.hasChildren = function(){\n        if (this.children){\n            return true;\n        }\n    };\n\n    this.setParent = function(parent){\n        this.parent = parent;\n    };\n\n    this.getFullPath = function(){\n        if (this.parent === null) {\n            return this.name;\n        }\n\n        return this.parent.getFullPath() + &quot;\\\\&quot; + this.name;\n    };\n\n    if (this.hasChildren()){\n        for (var i = 0; i &lt; this.children.length; i++){\n            this.children[i].setParent(this);\n        }\n    }\n};\n\nvar FileSystem = function(){\n    this._root = [\n        new File(&quot;C:\\\\&quot;, DIRECTORY, [\n            new File(&quot;Users&quot;, DIRECTORY, [\n                new File(&quot;John Smith&quot;, DIRECTORY,[])\n            ]),\n            new File(&quot;Windows&quot;, DIRECTORY, []),\n            new File(&quot;todo.txt&quot;, FILE, null)\n        ]),\n        new File(&quot;D:\\\\&quot;, DIRECTORY, [])\n    ];\n\n    this.getRoot = function(){\n        return this._root;\n    };\n};\n\n/*\n * ViewModel\n *    view model works with Model and\n *    adapts it's properties for View */\n\nvar FileViewModel = function(file){\n    this.children = js.bindableList();\n    this.name = file.name;\n    this.isDirectory = file.isDirectory;\n\n    if (file.hasChildren()) {\n        for (var i = 0; i &lt; file.children.length; i++) {\n            var child = file.children[i];\n            var childViewModel = new FileViewModel(child);\n\n            this.children.add(childViewModel);\n        }\n    }\n\n    this.showFullPath = function(){\n        alert(file.getFullPath());\n    };\n};\n\nvar FileSystemViewModel = function(fileSystem){\n    this.fileTree = js.bindableList();\n\n    this.initState = function(){\n        var drives = fileSystem.getRoot();\n        for (var i = 0; i &lt; drives.length; i++){\n            var drive = drives[i];\n            var driveViewModel = new FileViewModel(drive);\n\n            this.fileTree.add(driveViewModel);\n        }\n    };\n};\n\n/*\n * View\n *    view consumes ViewModel bindable properties\n *    and wires it to the markup */\n\nvar FileView = function(){\n    this.template =\n        &quot;&lt;li class='item'&gt;&quot; +\n            &quot;&lt;a href='#' class='name'&gt;&lt;/a&gt;&quot; +\n            &quot;&lt;ul class='children'&gt;&lt;/ul&gt;&quot; +\n        &quot;&lt;/li&gt;&quot;;\n\n    this.init = function(view, fileViewModel){\n        if (fileViewModel.isDirectory) {\n            view.find(&quot;.item&quot;).addClass(&quot;directory&quot;);\n        }\n\n        view.bind(fileViewModel.name).to(&quot;.name&quot;);\n        view.bind(fileViewModel.children).to(&quot;.children&quot;, FileView);\n\n        view.on(&quot;a&quot;, &quot;click&quot;).react(fileViewModel.showFullPath);\n    };\n};\n\nvar FileTreeView = function(){\n    this.template = &quot;#FileSystemTemplate&quot;;\n    this.init = function(view, fileSystemViewModel){\n        view.bind(fileSystemViewModel.fileTree).to(&quot;#treeRoot&quot;, FileView);\n    };\n};\n\n/* Putting it all together */\n\nvar fileSystem = new FileSystem();\nvar fileSystemViewModel = new FileSystemViewModel(fileSystem);\n\njs.renderView(FileTreeView, fileSystemViewModel).to(&quot;#fileTree&quot;);","description":"<p>This example demonstrates rendering a composite UI markup using Views. It demonstrates a few points:</p>\n\n<ul>\n    <li>working with a bindable list</li>\n    <li>creating composite list rendered with a single View class</li>\n    <li>nesting Views using bind-to-view feature</li>\n    <li>simple Model-ViewModel-View collaboration scenario</li>\n</ul>\n\n<p>\n    Note how view rendering mechanism respects the scope of rendering.\n    You can use relative jQuery selectors inside <code>init</code> method\n    and these selectors will return the element within the relative view scope.\n</p>","styles":"#result #destination #fileTree #treeRoot\n{\n    margin-bottom: 0;\n}\n\n#fileTree #treeRoot ul\n{\n    padding-left: 5px;\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n}\n\n#fileTree ul li\n{\n    font-size: 12px;\n    font-weight: 700;\n    padding-left: 20px;\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n    background: url(assets/images/file.png) no-repeat 0 0;\n}\n\n#fileTree ul li.directory\n{\n    background: url(assets/images/folder.png) no-repeat 0 0;\n}\n\n#fileTree ul li a\n{\n    color: #000000;\n    text-decoration: none;\n}\n\n#fileTree ul li a:hover\n{\n    text-decoration: underline;\n}"}