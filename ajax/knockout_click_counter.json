{"id":"knockout_click_counter","title":"Knockout Click Counter","children":[],"isNew":false,"markup":"<script id=\"clickViewTemplate\" type=\"text/view\">\n    <div>You've clicked <span id='numberOfClicks'>&nbsp;</span> times</div>\n     \n    <button id=\"clickMe\">Click me</button>\n     \n    <div id='hasClickedTooManyTimes'>\n        That's too many clicks! Please stop before you wear out your fingers.\n        <button id='resetClicks'>Reset clicks</button>\n    </div>\n</script>\n\n<div id=\"sample\"></div>","code":"var ClickViewModel = function(){\n    this.numberOfClicks = js.bindableValue();\n\n    this.hasClickedToManyTimes = js.dependentValue(\n        this.numberOfClicks,\n        function(numberOfClicksValue){\n            return numberOfClicksValue >= 3;\n        });\n\n    this.registerClick = function(){\n        var newClicksCount = this.numberOfClicks.getValue() + 1;\n\n        this.numberOfClicks.setValue(newClicksCount);\n    };\n\n    this.resetClicks = function(){\n        this.numberOfClicks.setValue(0);\n    };\n\n    this.initState = function(){\n        this.numberOfClicks.setValue(0);\n    };\n};\n\nvar ClickView = function(){\n    this.template = \"#clickViewTemplate\";\n    this.init = function(view, viewModel){\n        var toManyClicksPanel = view.find(\"#hasClickedTooManyTimes\").getTarget();\n        var clickMeButton = view.find(\"#clickMe\").getTarget();\n\n        view.bind(viewModel.numberOfClicks).to(\"#numberOfClicks\");\n        view.bind(viewModel.hasClickedToManyTimes).to(function(tooManyClicks){\n            if (tooManyClicks) {\n                toManyClicksPanel.show();\n                clickMeButton.prop(\"disabled\", true);\n            } else {\n                toManyClicksPanel.hide();\n                clickMeButton.prop(\"disabled\", false);\n            }\n        });\n\n        view.on(\"#clickMe\", \"click\").react(viewModel.registerClick);\n        view.on(\"#resetClicks\", \"click\").react(viewModel.resetClicks);\n    };\n};\n\njs.renderView(ClickView, new ClickViewModel()).to(\"#sample\");","formattedCode":"var ClickViewModel = function(){\n    this.numberOfClicks = js.bindableValue();\n\n    this.hasClickedToManyTimes = js.dependentValue(\n        this.numberOfClicks,\n        function(numberOfClicksValue){\n            return numberOfClicksValue &gt;= 3;\n        });\n\n    this.registerClick = function(){\n        var newClicksCount = this.numberOfClicks.getValue() + 1;\n\n        this.numberOfClicks.setValue(newClicksCount);\n    };\n\n    this.resetClicks = function(){\n        this.numberOfClicks.setValue(0);\n    };\n\n    this.initState = function(){\n        this.numberOfClicks.setValue(0);\n    };\n};\n\nvar ClickView = function(){\n    this.template = &quot;#clickViewTemplate&quot;;\n    this.init = function(view, viewModel){\n        var toManyClicksPanel = view.find(&quot;#hasClickedTooManyTimes&quot;).getTarget();\n        var clickMeButton = view.find(&quot;#clickMe&quot;).getTarget();\n\n        view.bind(viewModel.numberOfClicks).to(&quot;#numberOfClicks&quot;);\n        view.bind(viewModel.hasClickedToManyTimes).to(function(tooManyClicks){\n            if (tooManyClicks) {\n                toManyClicksPanel.show();\n                clickMeButton.prop(&quot;disabled&quot;, true);\n            } else {\n                toManyClicksPanel.hide();\n                clickMeButton.prop(&quot;disabled&quot;, false);\n            }\n        });\n\n        view.on(&quot;#clickMe&quot;, &quot;click&quot;).react(viewModel.registerClick);\n        view.on(&quot;#resetClicks&quot;, &quot;click&quot;).react(viewModel.resetClicks);\n    };\n};\n\njs.renderView(ClickView, new ClickViewModel()).to(&quot;#sample&quot;);","description":"<p>\n    Port of knockout <a href=\"http://knockoutjs.com/examples/clickCounter.html\">Click Counter</a> example.\n</p>"}