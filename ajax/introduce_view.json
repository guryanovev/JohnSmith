{"id":"introduce_view","title":"Introducing view","children":[{"id":"view_simple","title":"Simple vew","children":[],"isNew":false,"markup":"<div id='personTemplate' type='text/view'>\n    <div class='person'>\n        <span class='firstName'></span>\n        <span class='lastName'></span>\n    </div>\n</div>\n\n<div id=\"me\">\n</div>","code":"var ViewModel = function(){\n    this.firstName = \"John\";\n    this.lastName = \"Smith\";\n};\n\n// Define Vew class\nvar PersonView = function(){\n    // Set template selector\n    this.template = \"#personTemplate\";\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(\".firstName\");\n        view.bind(viewModel.lastName).to(\".lastName\");\n    };\n};\n\n// Create view instance\nvar view = js.createView(PersonView, new ViewModel());\n\n// Render view instance\nview.renderTo(\"#me\");","formattedCode":"var ViewModel = function(){\n    this.firstName = &quot;John&quot;;\n    this.lastName = &quot;Smith&quot;;\n};\n\n// Define Vew class\nvar PersonView = function(){\n    // Set template selector\n    this.template = &quot;#personTemplate&quot;;\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(&quot;.firstName&quot;);\n        view.bind(viewModel.lastName).to(&quot;.lastName&quot;);\n    };\n};\n\n// Create view instance\nvar view = js.createView(PersonView, new ViewModel());\n\n// Render view instance\nview.renderTo(&quot;#me&quot;);","description":"<p>\n    This example demonstrates simple view rendering.\n</p>\n\n<p>\n    Note that a View requires a template to render. Template is a selector that points to a hidden markup block.\n    Usually such blocks defined with <code>script</code> element:\n</p>\n\n<p>\n<pre><code class=\"html\">&lt;script id=\"TEMPLATE_ID\" type=\"text/view\"&gt;\n    MARKUP GOES HERE\n&lt;/script&gt;</code></pre>\n</p>\n\n<p>\n    Optionally a View could have an <code>init</code> method. It is a point where you can define bindings, nested views\n    and so on. Note that you use <code>this.bind</code> instead of <code>js.bind</code> inside a view. This makes sure\n    that all bindings are configured relatively to the View Context. It means that if you render view to <code>#myView</code> and\n    bind to <code>.firstName</code> then actual binding will be setup to <code>#myVew .firstName</code>.\n</p>\n\n<p>\n    Once View class is defined you can create a view instance by calling <code>js.createView</code> method.\n    That method returns special View instance that could be rendered with <code>renderTo</code> method.\n</p>\n"},{"id":"view_init_state","title":"Using initState method","children":[],"isNew":false,"markup":"<script id='personDetailsTemplate' type='text/view'>\n    <table class='table table-bordered'>\n        <tr>\n            <th>First name:</th>\n            <td class='firstName'></td>\n        </tr>\n        <tr>\n            <th>Last name:</th>\n            <td class='lastName'></td>\n        </tr>\n    </table>\n</script>\n\n<div id=\"meDetails\">\n</div>","code":"var ViewModel = function(){\n    this.firstName = js.bindableValue(),\n    this.lastName = js.bindableValue(),\n    this.initState = function(){\n        // this function will be called by the vew after rendering.\n        this.firstName.setValue(\"John\");\n        this.lastName.setValue(\"Smith\");\n    };\n};\n\nvar PersonView = function(){\n    this.template = \"#personDetailsTemplate\";\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(\".firstName\");\n        view.bind(viewModel.lastName).to(\".lastName\");\n    };\n};\n\nvar view = js.createView(PersonView, new ViewModel());\n\nview.renderTo(\"#meDetails\");","formattedCode":"var ViewModel = function(){\n    this.firstName = js.bindableValue(),\n    this.lastName = js.bindableValue(),\n    this.initState = function(){\n        // this function will be called by the vew after rendering.\n        this.firstName.setValue(&quot;John&quot;);\n        this.lastName.setValue(&quot;Smith&quot;);\n    };\n};\n\nvar PersonView = function(){\n    this.template = &quot;#personDetailsTemplate&quot;;\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(&quot;.firstName&quot;);\n        view.bind(viewModel.lastName).to(&quot;.lastName&quot;);\n    };\n};\n\nvar view = js.createView(PersonView, new ViewModel());\n\nview.renderTo(&quot;#meDetails&quot;);","description":"<p><code>initState</code> is a point to initialize bindable values. <code>initState</code> is called by the veiw after rendering when all bindable values are ready.</p>"},{"id":"view_use_for_bindable","title":"Using a view for rendering bindable value","children":[],"isNew":false,"markup":"<script id='friendTemplate' type='text/view'>\n    <div class='friend'>\n        <span class='firstName'></span>\n        <span class='lastName'></span>\n    </div>\n</script>\n\n<div id=\"myFriend\">\n</div>","code":"var friend = js.bindableValue();\n\nvar FriendView = function(){\n    this.template = \"#friendTemplate\";\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(\".firstName\");\n        view.bind(viewModel.lastName).to(\".lastName\");\n    };\n};\n\njs.bind(friend).to(\"#myFriend\", FriendView);\n\nfriend.setValue({\n    firstName: \"Joe\",\n    lastName: \"Bloggs\"\n});\n","formattedCode":"var friend = js.bindableValue();\n\nvar FriendView = function(){\n    this.template = &quot;#friendTemplate&quot;;\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(&quot;.firstName&quot;);\n        view.bind(viewModel.lastName).to(&quot;.lastName&quot;);\n    };\n};\n\njs.bind(friend).to(&quot;#myFriend&quot;, FriendView);\n\nfriend.setValue({\n    firstName: &quot;Joe&quot;,\n    lastName: &quot;Bloggs&quot;\n});\n","description":"<p>Demonstrates how views could be used to render bindable value</p>"}],"isNew":false,"description":"<div class=\"row-fluid\">\n    <div class=\"span6\">\n        <p>\n            Views are objects that work as a glue between <strong>ViewModel</strong> and HTML markup. Views consume bindable\n            properties of ViewModel and wire it with corresponding DOM elements. Views could also handle DOM events and call\n            ViewModel methods when these events occur.\n        </p>\n\n        <p>\n            Every view has a strict scope defined a by selector passed to <code>renderTo</code> method. It means that any binding\n            or nested views setup will be made relatively to root View element.\n        </p>\n    </div>\n</div>"}