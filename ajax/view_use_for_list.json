{"id":"view_use_for_list","title":"Rendering bindable lists","children":[],"isNew":false,"markup":"<script id='friendRowTemplate' type='text/view'>\n    <tr class='friend'>\n        <td>\n            <input type=\"checkbox\" />\n        </td>\n        <td class='firstName'></td>\n        <td class='lastName'></td>\n        <td>\n            <a href=\"#\">view details</a>\n        </td>\n    </tr>\n</script>\n\n<table id=\"friendsTable\" class=\"table table-bordered table-striped\">\n    <thead>\n    <tr>\n        <th></th>\n        <th>First name</th>\n        <th>Last name</th>\n        <th></th>\n    </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>","code":"/* Create a bindable list */\nvar friends = js.bindableList();\n\n/* View */\nvar FriendView = function(){\n    this.template = \"#friendRowTemplate\";\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(\".firstName\");\n        view.bind(viewModel.lastName).to(\".lastName\");\n    };\n}\n\njs.bind(friends).to(\"#friendsTable tbody\", FriendView);\n\nfriends.setValue([\n    { firstName: \"Joe\", lastName: \"Bloggs\"},\n    { firstName: \"Fred\", lastName: \"Bloggs\"},\n    { firstName: \"Bob\", lastName: \"Soap\"}\n]);","formattedCode":"/* Create a bindable list */\nvar friends = js.bindableList();\n\n/* View */\nvar FriendView = function(){\n    this.template = &quot;#friendRowTemplate&quot;;\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(&quot;.firstName&quot;);\n        view.bind(viewModel.lastName).to(&quot;.lastName&quot;);\n    };\n}\n\njs.bind(friends).to(&quot;#friendsTable tbody&quot;, FriendView);\n\nfriends.setValue([\n    { firstName: &quot;Joe&quot;, lastName: &quot;Bloggs&quot;},\n    { firstName: &quot;Fred&quot;, lastName: &quot;Bloggs&quot;},\n    { firstName: &quot;Bob&quot;, lastName: &quot;Soap&quot;}\n]);","description":"<p>\n    You can create bindable collections using <code>js.bindableList</code> method. BindableList acts like a\n    regular bindable value, but it has a few additional methods. BindableList could be bound to markup element\n    using regular View. In this case, the View will be rendered for every list item.\n</p>"}