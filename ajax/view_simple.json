{"id":"view_simple","title":"Simple vew","children":[],"isNew":false,"markup":"<div id='personTemplate' type='text/view'>\n    <div class='person'>\n        <span class='firstName'></span>\n        <span class='lastName'></span>\n    </div>\n</div>\n\n<div id=\"me\">\n</div>","code":"var ViewModel = function(){\n    this.firstName = \"John\";\n    this.lastName = \"Smith\";\n};\n\n// Define Vew class\nvar PersonView = function(){\n    // Set template selector\n    this.template = \"#personTemplate\";\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(\".firstName\");\n        view.bind(viewModel.lastName).to(\".lastName\");\n    };\n};\n\n// Create view instance\nvar view = js.createView(PersonView, new ViewModel());\n\n// Render view instance\nview.renderTo(\"#me\");","formattedCode":"var ViewModel = function(){\n    this.firstName = &quot;John&quot;;\n    this.lastName = &quot;Smith&quot;;\n};\n\n// Define Vew class\nvar PersonView = function(){\n    // Set template selector\n    this.template = &quot;#personTemplate&quot;;\n\n    this.init = function(view, viewModel){\n        view.bind(viewModel.firstName).to(&quot;.firstName&quot;);\n        view.bind(viewModel.lastName).to(&quot;.lastName&quot;);\n    };\n};\n\n// Create view instance\nvar view = js.createView(PersonView, new ViewModel());\n\n// Render view instance\nview.renderTo(&quot;#me&quot;);","description":"<p>\n    This example demonstrates simple view rendering.\n</p>\n\n<p>\n    Note that a View requires a template to render. Template is a selector that points to a hidden markup block.\n    Usually such blocks defined with <code>script</code> element:\n</p>\n\n<p>\n<pre><code class=\"html\">&lt;script id=\"TEMPLATE_ID\" type=\"text/view\"&gt;\n    MARKUP GOES HERE\n&lt;/script&gt;</code></pre>\n</p>\n\n<p>\n    Optionally a View could have an <code>init</code> method. It is a point where you can define bindings, nested views\n    and so on. Note that you use <code>this.bind</code> instead of <code>js.bind</code> inside a view. This makes sure\n    that all bindings are configured relatively to the View Context. It means that if you render view to <code>#myView</code> and\n    bind to <code>.firstName</code> then actual binding will be setup to <code>#myVew .firstName</code>.\n</p>\n\n<p>\n    Once View class is defined you can create a view instance by calling <code>js.createView</code> method.\n    That method returns special View instance that could be rendered with <code>renderTo</code> method.\n</p>\n"}